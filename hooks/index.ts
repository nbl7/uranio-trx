/**
 * Autogenerated TRX Hooks module from urn-cli
 *
 * @packageDocumentation
 */

import * as uranio from "../cln/main";

export const hooks = {
	superusers: {
		count: async (
			options?: uranio.types.Hook.Arguments<"superuser", "count">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "count"> = {
				...options,
			};
			return await uranio.base.create("superuser").hook("count")(args);
		},
		find: async (
			options?: uranio.types.Hook.Arguments<"superuser", "find">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "find"> = {
				...options,
			};
			return await uranio.base.create("superuser").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"superuser", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("superuser").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"superuser", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "find_one"> = {
				...options,
			};
			return await uranio.base.create("superuser").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"superuser", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "insert"> = {
				...options,
			};
			return await uranio.base.create("superuser").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"superuser", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("superuser").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"superuser", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"superuser", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("superuser").hook("delete")(args);
		},
	},
	users: {
		count: async (options?: uranio.types.Hook.Arguments<"user", "count">) => {
			const args: uranio.types.Hook.Arguments<"user", "count"> = {
				...options,
			};
			return await uranio.base.create("user").hook("count")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"user", "find">) => {
			const args: uranio.types.Hook.Arguments<"user", "find"> = {
				...options,
			};
			return await uranio.base.create("user").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"user", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"user", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("user").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"user", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"user", "find_one"> = {
				...options,
			};
			return await uranio.base.create("user").hook("find_one")(args);
		},
		insert: async (options?: uranio.types.Hook.Arguments<"user", "insert">) => {
			const args: uranio.types.Hook.Arguments<"user", "insert"> = {
				...options,
			};
			return await uranio.base.create("user").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"user", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"user", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("user").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"user", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"user", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("user").hook("delete")(args);
		},
	},
	groups: {
		count: async (options?: uranio.types.Hook.Arguments<"group", "count">) => {
			const args: uranio.types.Hook.Arguments<"group", "count"> = {
				...options,
			};
			return await uranio.base.create("group").hook("count")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"group", "find">) => {
			const args: uranio.types.Hook.Arguments<"group", "find"> = {
				...options,
			};
			return await uranio.base.create("group").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"group", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"group", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("group").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"group", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"group", "find_one"> = {
				...options,
			};
			return await uranio.base.create("group").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"group", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"group", "insert"> = {
				...options,
			};
			return await uranio.base.create("group").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"group", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"group", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("group").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"group", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"group", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("group").hook("delete")(args);
		},
	},
	errors: {
		count: async (options?: uranio.types.Hook.Arguments<"error", "count">) => {
			const args: uranio.types.Hook.Arguments<"error", "count"> = {
				...options,
			};
			return await uranio.base.create("error").hook("count")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"error", "find">) => {
			const args: uranio.types.Hook.Arguments<"error", "find"> = {
				...options,
			};
			return await uranio.base.create("error").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"error", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"error", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("error").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"error", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"error", "find_one"> = {
				...options,
			};
			return await uranio.base.create("error").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"error", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"error", "insert"> = {
				...options,
			};
			return await uranio.base.create("error").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"error", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"error", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("error").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"error", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"error", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("error").hook("delete")(args);
		},
	},
	requests: {
		count: async (
			options?: uranio.types.Hook.Arguments<"request", "count">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "count"> = {
				...options,
			};
			return await uranio.base.create("request").hook("count")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"request", "find">) => {
			const args: uranio.types.Hook.Arguments<"request", "find"> = {
				...options,
			};
			return await uranio.base.create("request").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"request", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("request").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"request", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "find_one"> = {
				...options,
			};
			return await uranio.base.create("request").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"request", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "insert"> = {
				...options,
			};
			return await uranio.base.create("request").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"request", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("request").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"request", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"request", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("request").hook("delete")(args);
		},
	},
	customers: {
		count: async (
			options?: uranio.types.Hook.Arguments<"customer", "count">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "count"> = {
				...options,
			};
			return await uranio.base.create("customer").hook("count")(args);
		},
		pippi: async (
			options?: uranio.types.Hook.Arguments<"customer", "pippi">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "pippi"> = {
				...options,
			};
			return await uranio.base.create("customer").hook("pippi")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"customer", "find">) => {
			const args: uranio.types.Hook.Arguments<"customer", "find"> = {
				...options,
			};
			return await uranio.base.create("customer").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"customer", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("customer").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"customer", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "find_one"> = {
				...options,
			};
			return await uranio.base.create("customer").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"customer", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "insert"> = {
				...options,
			};
			return await uranio.base.create("customer").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"customer", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("customer").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"customer", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"customer", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("customer").hook("delete")(args);
		},
	},
	mykarts: {
		count: async (options?: uranio.types.Hook.Arguments<"mykart", "count">) => {
			const args: uranio.types.Hook.Arguments<"mykart", "count"> = {
				...options,
			};
			return await uranio.base.create("mykart").hook("count")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"mykart", "find">) => {
			const args: uranio.types.Hook.Arguments<"mykart", "find"> = {
				...options,
			};
			return await uranio.base.create("mykart").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"mykart", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"mykart", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("mykart").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"mykart", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"mykart", "find_one"> = {
				...options,
			};
			return await uranio.base.create("mykart").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"mykart", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"mykart", "insert"> = {
				...options,
			};
			return await uranio.base.create("mykart").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"mykart", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"mykart", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("mykart").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"mykart", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"mykart", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("mykart").hook("delete")(args);
		},
	},
	products: {
		count: async (
			options?: uranio.types.Hook.Arguments<"product", "count">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "count"> = {
				...options,
			};
			return await uranio.base.create("product").hook("count")(args);
		},
		myroute: async (
			options?: uranio.types.Hook.Arguments<"product", "myroute">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "myroute"> = {
				...options,
			};
			return await uranio.base.create("product").hook("myroute")(args);
		},
		find: async (options?: uranio.types.Hook.Arguments<"product", "find">) => {
			const args: uranio.types.Hook.Arguments<"product", "find"> = {
				...options,
			};
			return await uranio.base.create("product").hook("find")(args);
		},
		find_id: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"product", "find_id">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "find_id"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("product").hook("find_id")(args);
		},
		find_one: async (
			options?: uranio.types.Hook.Arguments<"product", "find_one">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "find_one"> = {
				...options,
			};
			return await uranio.base.create("product").hook("find_one")(args);
		},
		insert: async (
			options?: uranio.types.Hook.Arguments<"product", "insert">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "insert"> = {
				...options,
			};
			return await uranio.base.create("product").hook("insert")(args);
		},
		update: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"product", "update">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "update"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("product").hook("update")(args);
		},
		delete: async (
			id: string,
			options?: uranio.types.Hook.Arguments<"product", "delete">
		) => {
			const args: uranio.types.Hook.Arguments<"product", "delete"> = {
				params: {
					id: id,
				},
				...options,
			};
			return await uranio.base.create("product").hook("delete")(args);
		},
	},
} as const;
