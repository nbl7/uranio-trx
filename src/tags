!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AbstractResponse	return/return.t.ts	/^	interface AbstractResponse<T = null> {$/;"	i
Fail	return/return.t.ts	/^	export interface Fail<T = null> extends AbstractResponse<T> {$/;"	i
IURNResource	resources/resource.ts	/^export interface IURNResource extends IURN_OBJ {$/;"	i
IURNUser	resources/user.ts	/^export interface IURNUser extends IURNResource {$/;"	i
IURN_OBJ	resources/obj.ts	/^export interface IURN_OBJ {$/;"	i
L	tst/A.ts	/^import L from '.\/L';$/;"	I
L	tst/B.ts	/^import L from '.\/L';$/;"	I
L	tst/L.ts	/^class L {$/;"	c
LogType	log/log.t.ts	/^export type LogType = 'error' | 'warn' | 'log' | 'debug' | 'fndebug';$/;"	t
MyClass	tst/console_tst.ts	/^class MyClass{$/;"	c
Response	return/return.t.ts	/^	export type Response<T = null, K = null> = Success<T> | Fail<K>;$/;"	t
ReturnType	return/return.t.ts	/^	export type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;$/;"	t
Success	return/return.t.ts	/^	export interface Success<T = null> extends AbstractResponse<T> {$/;"	i
UBoolean	return/return.t.ts	/^	export interface UBoolean<T extends boolean = boolean> {$/;"	i
URNLogLevel	log/log.t.ts	/^export enum URNLogLevel {NONE, ERROR, WARNING, LOG, DEBUG, FUNCTION_DEBUG}$/;"	e
URNResponseInjectable	util/injectable.t.ts	/^export interface URNResponseInjectable{$/;"	i
URNReturn	return/return.ts	/^class URNReturn {$/;"	c
URNTRX	trx.ts	/^export class URNTRX {$/;"	c
URNTRXConfig	types/config.ts	/^export interface URNTRXConfig{$/;"	i
URNTRXRAW	urn_raw.ts	/^export class URNTRXRAW {$/;"	c
URNTRXResource	trxs/resources.ts	/^export abstract class URNTRXResource {$/;"	c
URNTRXUsers	trxs/users.ts	/^export class URNTRXUsers extends URNTRXResource {$/;"	c
_add_inject	return/return.ts	/^	private _add_inject(inject_object:URNResponseInjectable){$/;"	m
_path	trxs/resources.ts	/^	protected _path:string;$/;"	m
_raw	trxs/resources.ts	/^	private _raw:URNTRXRAW;$/;"	m
_run_fail_handlers	return/return.ts	/^	private _run_fail_handlers<T>(response: URNResponse.Fail<T>)$/;"	m
_run_success_handlers	return/return.ts	/^	private _run_success_handlers<T>(response: URNResponse.Success<T>)$/;"	m
_trx_raw	trx.ts	/^	private _trx_raw:URNTRXRAW;$/;"	m
async_res	return/return.ts	/^	public async_res<R>(handler:(...args:any[]) => Promise<R>, name?:string){$/;"	m
axios	urn_raw.ts	/^import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';$/;"	I
cecho	log/log.ts	/^function cecho(type:LogType, style:string|string[], depth:number, start:number, ...params:any[])$/;"	f
constructor	trxs/resources.ts	/^	public constructor(_rawInstance:URNTRXRAW){$/;"	m
create_injectable_logger	log/log.ts	/^export function create_injectable_logger()$/;"	f
create_instance	return/return.ts	/^function create_instance(inject?:URNResponseInjectable):URNReturn{$/;"	f
dateFormat	log/log.ts	/^import dateFormat from 'dateformat';$/;"	I
debug	log/log.ts	/^export function debug(...params:any[])$/;"	f
debug_constructor	log/log.ts	/^export function debug_constructor<T extends { new (...constr_args:any[]):any }>(constr_func: T)$/;"	f
debug_methods	log/log.ts	/^export function debug_methods(target:Function):void{$/;"	f
error	log/log.ts	/^export function error(...params:any[])$/;"	f
f1	tst/A.ts	/^function f1(){$/;"	f
f2	tst/B.ts	/^function f2(){$/;"	f
fndebug	log/log.ts	/^export function fndebug(...params:any[])$/;"	f
fndebugCostructor	log/log.ts	/^export function fndebugCostructor(rand_id:string, constructor_name:string, str_args:string){$/;"	f
fndebugMethodResponse	log/log.ts	/^export function fndebugMethodResponse(rand_id:string, target_name:string, method:string, str_result:string, is_promise=false):void{$/;"	f
fndebugMethodResponseError	log/log.ts	/^export function fndebugMethodResponseError(rand_id:string, target_name:string, method:string, error:Error):void{$/;"	f
fndebugMethodWithArgs	log/log.ts	/^export function fndebugMethodWithArgs(rand_id:string, target_name:string, method:string, str_args:string):void{$/;"	f
fndebugPrivateCostructor	log/log.ts	/^export function fndebugPrivateCostructor(rand_id:string, constructor_name:string, str_args:string){$/;"	f
fns	tst/L.ts	/^	public fns:(() => void)[];$/;"	m
formatArgs	log/log.ts	/^export function formatArgs(args:any[], max_str_length:number):string{$/;"	f
formatResult	log/log.ts	/^export function formatResult(result:any, max_str_length:number):string{$/;"	f
get	trxs/resources.ts	/^	public async get()$/;"	m
get	urn_raw.ts	/^	public async get(url:string)$/;"	m
inject_objects	return/return.ts	/^	public inject_objects: URNResponseInjectable[];$/;"	m
isFail	return/return.t.ts	/^	export function isFail(response:Response<any,any>): response is Fail {$/;"	f
isFalse	return/return.t.ts	/^	export function isFalse(response:UBoolean<any>): response is UBoolean<false> {$/;"	f
isSuccess	return/return.t.ts	/^	export function isSuccess(response:Response<any,any>): response is Success {$/;"	f
isTrue	return/return.t.ts	/^	export function isTrue(response:UBoolean<any>): response is UBoolean<true> {$/;"	f
jsonOneLine	log/log.ts	/^export function jsonOneLine(obj:any, white_space=' '):string{$/;"	f
log	log/log.ts	/^export function log(...params:any[])$/;"	f
log	tst/L.ts	/^	public log(){$/;"	m
log_config	log/log.ts	/^import log_config from '.\/log.config';$/;"	I
log_param	log/log.ts	/^function log_param(p:any, stylelog:string)$/;"	f
log_stack	log/log.ts	/^function log_stack(type:LogType, stylelog:string, depth:number, start=4)$/;"	f
my_method	tst/console_tst.ts	/^	public my_method(a:number,b:string){$/;"	m
push_injects	return/return.ts	/^	public push_injects(inject_objects:URNResponseInjectable|URNResponseInjectable[])$/;"	m
randId	log/log.ts	/^export function randId():string{$/;"	f
replace_method_with_logs	log/log.ts	/^function replace_method_with_logs($/;"	f
res	return/return.ts	/^	public res<R>(handler:(...args:any[]) => R, name?:string){$/;"	m
return_error	return/return.ts	/^	public return_error(status:number, message:string, payload?:null, ex?:Error | null):URNResponse.Fail;$/;"	m
return_error	return/return.ts	/^	public return_error<T>(status:number, message:string, payload:T, ex?:Error | null):URNResponse.Fail<T> | URNResponse.Fail{$/;"	m
return_error	return/return.ts	/^	public return_error<T>(status:number, message:string, payload:T, ex?:Error | null):URNResponse.Fail<T>;$/;"	m
return_success	return/return.ts	/^	public return_success(message:string, payload?:null):URNResponse.Success;$/;"	m
return_success	return/return.ts	/^	public return_success<T>(message:string, payload:T):URNResponse.Success<T> | URNResponse.Success{$/;"	m
return_success	return/return.ts	/^	public return_success<T>(message:string, payload:T):URNResponse.Success<T>;$/;"	m
urn_return	tst/console_tst.ts	/^import urn_return from '..\/return\/return';$/;"	I
urn_return	tst/test_response.ts	/^import urn_return from '..\/return\/return';$/;"	I
urn_return	urn_raw.ts	/^import urn_return from '.\/return\/return';$/;"	I
urn_trx_raw	trx.ts	/^import urn_trx_raw, {URNTRXRAW} from '.\/urn_raw';$/;"	I
users	trx.ts	/^	public users:URNTRXUsers;$/;"	m
warn	log/log.ts	/^export function warn(...params:any[])$/;"	f
